{"version":3,"sources":["firebase-config.js","phone-otp-auth.js","Main.js","success-otp.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","PhoneOTPAuth","uiConfig","firebase","initializeApp","signInSuccessUrl","signInOptions","auth","PhoneAuthProvider","PROVIDER_ID","tosUrl","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","props","history","push","firebaseui","AuthUI","start","id","Component","withRouter","Main","submitPhoneNumberAuth","replace","submitPhoneNumberAuthDB","tailLayout","wrapperCol","offset","span","title","labelCol","name","initialValues","remember","onFinish","values","console","log","onFinishFailed","errorInfo","Item","label","rules","required","message","style","width","Password","type","htmlType","onClick","this","DatabaseOutlined","danger","PhoneOutlined","React","SuccessOTP","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sSAWeA,EAXM,CACjBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gB,0BCFbC,E,kLACiB,IAAD,OAEZC,GADQC,IAASC,cAAcZ,GACpB,CACfa,iBAAkB,eAClBC,cAAe,CAACH,IAASI,KAAKC,kBAAkBC,aAChDC,OAAQ,eACRC,UAAW,CACTC,4BAA6B,SAACC,EAAYC,GACtC,EAAKC,MAAMC,QAAQC,KAAK,oBAIvB,IAAIC,IAAgBC,OAAOhB,IAASI,QAC1Ca,MAAM,6BAA8BlB,K,+BAGvC,OACE,oCACA,yBAAKmB,GAAG,mC,GAnBaC,aAyBZC,cAAWtB,G,8EClBpBuB,E,4MAELC,sBAAwB,WACjB,EAAKV,MAAMC,QAAQU,QAAQ,c,EAGlCC,wBAA0B,a,uDAMzB,IAgBQC,EAAa,CACpBC,WAAY,CACVC,OAAQ,EACRC,KAAM,KAGT,OACE,6BACF,kBAAC,IAAD,CAAMC,MAAM,+BAEX,kBAAC,IAAD,iBAlBgB,CAChBC,SAAU,CACRF,KAAM,GAERF,WAAY,CACVE,KAAM,KAaR,CAEAG,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BC,SA9BgB,SAAAC,GAChBC,QAAQC,IAAI,WAAYF,IA8BxBG,eA3BwB,SAAAC,GACxBH,QAAQC,IAAI,UAAWE,MA4BtB,kBAAC,IAAKC,KAAN,CACAC,MAAM,SACNV,KAAK,SACLW,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAElC,kBAAC,IAAD,CAAaC,MAAO,CAACC,MAAM,WAG5B,kBAAC,IAAKN,KAAN,CACAC,MAAM,WACNV,KAAK,WACLW,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAElC,kBAAC,IAAMG,SAAP,OAGD,kBAAC,IAAKP,KAASf,EACd,kBAAC,IAAD,CAAQoB,MAAO,CAACC,MAAM,QAASE,KAAK,UAAUC,SAAS,SAASC,QAASC,KAAK3B,yBAC/D,kBAAC4B,EAAA,EAAD,MADf,sBAKO,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMxB,KAAM,GAAID,OAAQ,GACxB,kBAAC,IAAD,CAAQ0B,QAAM,EAACR,MAAO,CAACC,MAAM,QAASE,KAAK,UAAUC,SAAS,SAASC,QAASC,KAAK7B,uBACrF,kBAACgC,EAAA,EAAD,MADA,4C,GArEGC,IAAMpC,WAgFVC,cAAWC,GCjFXmC,E,uKARX,OACE,6BACA,2D,GAJmBrC,aCiCVsC,E,uKApBb,OACC,kBAAC,IAAD,KACC,6BACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,aACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,gBACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,KACX,kBAAC,EAAD,c,GAdYH,IAAMpC,WCAJwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMhC,a","file":"static/js/main.ae7f6390.chunk.js","sourcesContent":["var firebaseConfig = {\n    apiKey: \"AIzaSyBRpn8m9yxrJKeZxFsCd3hkr-vdMQ4zGNQ\",\n    authDomain: \"otpgeneration-14305.firebaseapp.com\",\n    databaseURL: \"https://otpgeneration-14305.firebaseio.com\",\n    projectId: \"otpgeneration-14305\",\n    storageBucket: \"otpgeneration-14305.appspot.com\",\n    messagingSenderId: \"779376225855\",\n    appId: \"1:779376225855:web:ec0b4e5283d5de2b29128a\",\n    measurementId: \"G-SNC2VC17LX\"\n  };\n\nexport default firebaseConfig;","import React, { Component } from 'react';\nimport firebaseConfig  from './firebase-config';\nimport * as firebaseui from \"firebaseui\";\nimport firebase from \"firebase\";\nimport { withRouter } from 'react-router-dom';\n\nclass PhoneOTPAuth extends Component {\n  componentDidMount() {\n    const fbase = firebase.initializeApp(firebaseConfig);\n    const uiConfig = {\n      signInSuccessUrl: '/success-otp', //This URL is used to return to that page when we got success response for phone authentication.\n      signInOptions: [firebase.auth.PhoneAuthProvider.PROVIDER_ID],\n      tosUrl: '/success-otp',\n      callbacks: {\n        signInSuccessWithAuthResult: (authResult, redirectUrl) => {\n            this.props.history.push('/success-otp'); // use callback for using react-router\n            }\n        }\n    }\n    var ui = new firebaseui.auth.AuthUI(firebase.auth());\n    ui.start(\"#firebaseui-auth-container\", uiConfig);\n  }\n  render() {\n    return (\n      <>\n      <div id=\"firebaseui-auth-container\"></div>\n      </>\n    )\n  }\n}\n\nexport default withRouter(PhoneOTPAuth);\n","import React from 'react';\nimport 'antd/dist/antd.css'\nimport './App.css';\nimport {\n    withRouter\n  } from \"react-router-dom\";\nimport { Form, Input, InputNumber, Button, Card, Row, Col} from 'antd';\n\nimport {\n    PhoneOutlined,\n    DatabaseOutlined\n} from '@ant-design/icons';\n\nclass Main extends React.Component {\t  \n\t\n\tsubmitPhoneNumberAuth = () =>{\n        this.props.history.replace('/otp-auth');\n\t}\n\n\tsubmitPhoneNumberAuthDB = () =>{\n        //TO be implemented\n        //this.props.history.replace('/success-otp');\n\t}\n\n\trender(){\n\t\tconst onFinish = values => {\n\t\t\tconsole.log('Success:', values);\n\t\t  };\n\t\t\n\t\t  const onFinishFailed = errorInfo => {\n\t\t\tconsole.log('Failed:', errorInfo);\n\t\t  };\n\t\t\n\t\t  const layout = {\n\t\t\tlabelCol: {\n\t\t\t  span: 8,\n\t\t\t},\n\t\t\twrapperCol: {\n\t\t\t  span: 12,\n\t\t\t},\n\t\t  };\n\t\t  const tailLayout = {\n\t\t\twrapperCol: {\n\t\t\t  offset: 6,\n\t\t\t  span: 12,\n\t\t\t},\n\t\t  };\n\t\treturn (\n    <div>\n\t\t<Card title=\"Firebase Otp Authentication\" >\n\t\t\t\n\t\t\t<Form\n\t\t\t{...layout}\n\t\t\tname=\"basic\"\n\t\t\tinitialValues={{ remember: true }}\n\t\t\tonFinish={onFinish}\n\t\t\tonFinishFailed={onFinishFailed}\n\t\t\t>\n\t\t\t\t<Form.Item\n\t\t\t\tlabel=\"Number\"\n\t\t\t\tname=\"number\"\n\t\t\t\trules={[{ required: true, message: 'Please input your number!' }]}\n\t\t\t\t>\n\t\t\t\t\t<InputNumber style={{width:\"100%\"}} />\n\t\t\t\t</Form.Item>\n\t\t\n\t\t\t\t<Form.Item\n\t\t\t\tlabel=\"Password\"\n\t\t\t\tname=\"password\"\n\t\t\t\trules={[{ required: true, message: 'Please input your password!' }]}\n\t\t\t\t>\n\t\t\t\t\t<Input.Password />\n\t\t\t\t</Form.Item>\n\t\t\n\t\t\t\t<Form.Item {...tailLayout}>\n\t\t\t\t\t<Button style={{width:\"100%\"}} type=\"primary\" htmlType=\"submit\" onClick={this.submitPhoneNumberAuthDB}>\n                    <DatabaseOutlined /> SIGN IN WITH DB\n\t\t\t\t\t</Button>\n\t\t\t\t</Form.Item>\n\t\t\t</Form>\n            <Row >\n                <Col  span={12} offset={6}>\n                <Button danger style={{width:\"100%\"}} type=\"primary\" htmlType=\"submit\" onClick={this.submitPhoneNumberAuth}>\n                <PhoneOutlined /> SIGN IN USING YOUR PHONE NUMBER\n\t\t\t    </Button>\n                </Col>\n            </Row>\n            \n\t\t</Card>\n    </div>\n\t\t);\n\t}\n}\nexport default withRouter(Main);\n\n\n","import React, { Component } from 'react';\n\nclass SuccessOTP extends Component {\n  render() {\n    return (\n      <div>\n      <h1>Phone Login Successful</h1>\n      </div>\n    )\n  }\n}\n\nexport default SuccessOTP;\n","import React from 'react';\nimport 'antd/dist/antd.css'\nimport './App.css';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute\n  } from \"react-router-dom\";\nimport PhoneOTPAuth from './phone-otp-auth';\nimport Main from './Main'\nimport SuccessOTP from './success-otp';\n\nclass App extends React.Component {\t  \n\t\n\trender(){\n\t\treturn(\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/otp-auth\">\n\t\t\t\t\t\t<PhoneOTPAuth />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/success-otp\">\n\t\t\t\t\t\t<SuccessOTP />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t<Main />\n\t\t\t\t\t</Route>\n\t\t\t\t\t\n\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}